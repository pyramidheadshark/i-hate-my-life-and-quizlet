from nicegui import ui
from logic.card_manager import check_answer # Import check_answer from logic
from logic.state_manager import current_card_index, flashcards, current_collection, notification_shown, all_cards_viewed, correct_count, incorrect_count, incorrect_cards, stats # Import state variables
from ui.navigation import retry_incorrect_cards_ui, restart_collection_ui # Import navigation UI functions

def update_card_content(card_container, correct_count_label, incorrect_count_label, remaining_label):
    global notification_shown, all_cards_viewed, current_card_index, flashcards, current_collection
    if not flashcards:
        card_container.clear()
        with card_container:
            ui.label("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.").classes('text-xl font-semibold text-center mb-4 text-gray-800 dark:text-white')
        remaining_label.text = "–û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫: 0"
        return

    remaining = max(0, len(flashcards) - current_card_index)
    remaining_label.text = f"–û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫: {remaining}"

    if current_card_index >= len(flashcards):
        if not notification_shown and not all_cards_viewed:
            ui.notify(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{current_collection}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ", type='positive')
            notification_shown = True
            all_cards_viewed = True
        card_container.clear()
        with card_container:
            with ui.column().classes('w-full text-center'):
                ui.label(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{current_collection}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ").classes('text-2xl font-bold mb-4 text-gray-800 dark:text-white')
                ui.label(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count}, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {incorrect_count}").classes('text-lg mb-6 text-gray-800 dark:text-white')
                if incorrect_cards:
                    ui.button('–ü—Ä–æ–π—Ç–∏ –æ—à–∏–±–∫–∏ –∑–∞–Ω–æ–≤–æ', on_click=lambda: retry_incorrect_cards_ui(card_container, correct_count_label, incorrect_count_label, remaining_label)).classes('bg-blue-500 text-white w-1/3 mx-auto py-2 mb-4') # Use ui function
                ui.button('–ü—Ä–æ–π—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ', on_click=lambda: restart_collection_ui(card_container, correct_count_label, incorrect_count_label, remaining_label)).classes('bg-blue-500 text-white w-1/3 mx-auto py-2 mb-4') # Use ui function
        return

    card = flashcards[current_card_index]
    card_container.clear()
    with card_container:
        with ui.card().classes('w-3/4 mx-auto p-6 shadow-lg rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-white'):
            ui.label(card["question"]).classes('text-2xl font-bold text-center mb-4 text-gray-800 dark:text-white')
            if card["type"] == "text":
                answer = ui.input('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç').classes('w-full p-2 border rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white mb-4')
                ui.button('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', on_click=lambda: check_answer_ui(answer, card, card_container, correct_count_label, incorrect_count_label, remaining_label)).classes('bg-blue-500 text-white w-full py-2 rounded') # Use ui function
            elif card["type"] == "single":
                selected = ui.radio(card["options"], value=None).classes('w-full flex flex-col gap-2 text-gray-800 dark:text-white mb-4')
                ui.button('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', on_click=lambda: check_answer_ui(selected, card, card_container, correct_count_label, incorrect_count_label, remaining_label)).classes('bg-blue-500 text-white w-full py-2 rounded') # Use ui function
            elif card["type"] == "multi":
                selected = [ui.checkbox(opt).classes('w-full text-gray-800 dark:text-white') for opt in card["options"]]
                ui.button('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', on_click=lambda: check_answer_ui(selected, card, card_container, correct_count_label, incorrect_count_label, remaining_label)).classes('bg-blue-500 text-white w-full py-2 rounded') # Use ui function

def check_answer_ui(answer, card, card_container, correct_count_label, incorrect_count_label, remaining_label):
    global current_card_index, correct_count, incorrect_count
    is_correct = check_answer(answer, card) # Call logic function to check answer
    if is_correct:
        ui.notify('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ', type='positive', timeout=3)
        correct_count += 1
        stats[current_collection]["correct"] += 1
        stats[current_collection]["cards"][card["question"]]["correct"] += 1
    else:
        correct_str = ", ".join(card["correct_answer"]) if isinstance(card["correct_answer"], list) else card["correct_answer"]
        ui.notify(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_str}', type='negative', timeout=3)
        incorrect_count += 1
        stats[current_collection]["incorrect"] += 1
        stats[current_collection]["cards"][card["question"]]["incorrect"] += 1
        if card not in incorrect_cards:
            incorrect_cards.append(card)
    correct_count_label.text = f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count}'
    incorrect_count_label.text = f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {incorrect_count}'
    current_card_index += 1
    ui.timer(2.0, lambda: update_card_content(card_container, correct_count_label, incorrect_count_label, remaining_label), once=True)

def next_card(card_container, correct_count_label, incorrect_count_label, remaining_label):
    global current_card_index
    if current_card_index < len(flashcards) - 1:
        current_card_index += 1
        update_card_content(card_container, correct_count_label, incorrect_count_label, remaining_label)

def prev_card(card_container, correct_count_label, incorrect_count_label, remaining_label):
    global current_card_index
    if current_card_index > 0:
        current_card_index -= 1
        update_card_content(card_container, correct_count_label, incorrect_count_label, remaining_label)
